// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	filerepo "github.com/Syncano/syncanoapis/gen/go/syncano/codebox/filerepo/v1"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// RepoClient is an autogenerated mock type for the RepoClient type
type RepoClient struct {
	mock.Mock
}

// Exists provides a mock function with given fields: ctx, in, opts
func (_m *RepoClient) Exists(ctx context.Context, in *filerepo.ExistsRequest, opts ...grpc.CallOption) (*filerepo.ExistsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *filerepo.ExistsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *filerepo.ExistsRequest, ...grpc.CallOption) *filerepo.ExistsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filerepo.ExistsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *filerepo.ExistsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: ctx, opts
func (_m *RepoClient) Upload(ctx context.Context, opts ...grpc.CallOption) (filerepo.Repo_UploadClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 filerepo.Repo_UploadClient
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) filerepo.Repo_UploadClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filerepo.Repo_UploadClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
