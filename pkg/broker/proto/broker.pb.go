// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/broker/proto/broker.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto1 "github.com/Syncano/codebox/pkg/lb/proto"
	proto2 "github.com/Syncano/codebox/pkg/script/proto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// RunRequest represents either a Meta message or a Chunk message.
// It should always consist of exactly 1 Meta and optionally repeated Chunk messages.
type RunRequest struct {
	Meta                 *RunRequest_MetaMessage        `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	LbMeta               *proto1.RunRequest_MetaMessage `protobuf:"bytes,2,opt,name=lbMeta,proto3" json:"lbMeta,omitempty"`
	Request              []*proto2.RunRequest           `protobuf:"bytes,3,rep,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *RunRequest) Reset()         { *m = RunRequest{} }
func (m *RunRequest) String() string { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()    {}
func (*RunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6323966a5e0dffec, []int{0}
}

func (m *RunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRequest.Unmarshal(m, b)
}
func (m *RunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRequest.Marshal(b, m, deterministic)
}
func (m *RunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRequest.Merge(m, src)
}
func (m *RunRequest) XXX_Size() int {
	return xxx_messageInfo_RunRequest.Size(m)
}
func (m *RunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunRequest proto.InternalMessageInfo

func (m *RunRequest) GetMeta() *RunRequest_MetaMessage {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RunRequest) GetLbMeta() *proto1.RunRequest_MetaMessage {
	if m != nil {
		return m.LbMeta
	}
	return nil
}

func (m *RunRequest) GetRequest() []*proto2.RunRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// Meta message specifies fields to describe what is being run.
type RunRequest_MetaMessage struct {
	Files                map[string]string `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnvironmentURL       string            `protobuf:"bytes,2,opt,name=environmentURL,proto3" json:"environmentURL,omitempty"`
	Trace                []byte            `protobuf:"bytes,3,opt,name=trace,proto3" json:"trace,omitempty"`
	TraceID              uint64            `protobuf:"varint,4,opt,name=traceID,proto3" json:"traceID,omitempty"`
	Sync                 bool              `protobuf:"varint,5,opt,name=sync,proto3" json:"sync,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RunRequest_MetaMessage) Reset()         { *m = RunRequest_MetaMessage{} }
func (m *RunRequest_MetaMessage) String() string { return proto.CompactTextString(m) }
func (*RunRequest_MetaMessage) ProtoMessage()    {}
func (*RunRequest_MetaMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_6323966a5e0dffec, []int{0, 0}
}

func (m *RunRequest_MetaMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRequest_MetaMessage.Unmarshal(m, b)
}
func (m *RunRequest_MetaMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRequest_MetaMessage.Marshal(b, m, deterministic)
}
func (m *RunRequest_MetaMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRequest_MetaMessage.Merge(m, src)
}
func (m *RunRequest_MetaMessage) XXX_Size() int {
	return xxx_messageInfo_RunRequest_MetaMessage.Size(m)
}
func (m *RunRequest_MetaMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRequest_MetaMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RunRequest_MetaMessage proto.InternalMessageInfo

func (m *RunRequest_MetaMessage) GetFiles() map[string]string {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *RunRequest_MetaMessage) GetEnvironmentURL() string {
	if m != nil {
		return m.EnvironmentURL
	}
	return ""
}

func (m *RunRequest_MetaMessage) GetTrace() []byte {
	if m != nil {
		return m.Trace
	}
	return nil
}

func (m *RunRequest_MetaMessage) GetTraceID() uint64 {
	if m != nil {
		return m.TraceID
	}
	return 0
}

func (m *RunRequest_MetaMessage) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

func init() {
	proto.RegisterType((*RunRequest)(nil), "broker.RunRequest")
	proto.RegisterType((*RunRequest_MetaMessage)(nil), "broker.RunRequest.MetaMessage")
	proto.RegisterMapType((map[string]string)(nil), "broker.RunRequest.MetaMessage.FilesEntry")
}

func init() { proto.RegisterFile("pkg/broker/proto/broker.proto", fileDescriptor_6323966a5e0dffec) }

var fileDescriptor_6323966a5e0dffec = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x4e, 0xdb, 0x40,
	0x10, 0x86, 0xb5, 0xb1, 0x93, 0x34, 0x93, 0xa8, 0xaa, 0xb6, 0x3d, 0x6c, 0x2d, 0xb5, 0xb2, 0x7a,
	0xa8, 0x5c, 0xb5, 0xb5, 0x23, 0x73, 0x89, 0xb8, 0x80, 0x10, 0x20, 0x21, 0x91, 0xcb, 0x46, 0x5c,
	0xb8, 0xd9, 0x66, 0x08, 0x56, 0x9c, 0x5d, 0xb3, 0xbb, 0x8e, 0xf0, 0xa3, 0xf0, 0x9e, 0x3c, 0x00,
	0xf2, 0xda, 0x51, 0x20, 0x08, 0x4e, 0x9e, 0x7f, 0xe7, 0xfb, 0x77, 0x7e, 0x8f, 0x0d, 0x3f, 0xca,
	0xd5, 0x32, 0x4a, 0x95, 0x5c, 0xa1, 0x8a, 0x4a, 0x25, 0x8d, 0xec, 0x44, 0x68, 0x05, 0x1d, 0xb4,
	0xca, 0xfb, 0xde, 0x60, 0x45, 0xda, 0x21, 0xaa, 0x12, 0x62, 0x8b, 0x78, 0xf6, 0x06, 0x9d, 0xa9,
	0xbc, 0x34, 0x5d, 0xbb, 0x15, 0x6d, 0xfb, 0xd7, 0xa3, 0x03, 0xc0, 0x2b, 0xc1, 0xf1, 0xbe, 0x42,
	0x6d, 0x68, 0x0c, 0xee, 0x1a, 0x4d, 0xc2, 0x88, 0x4f, 0x82, 0x71, 0xfc, 0x33, 0xec, 0xa6, 0xed,
	0x88, 0x70, 0x8e, 0x26, 0x99, 0xa3, 0xd6, 0xc9, 0x12, 0xb9, 0x65, 0x69, 0x0c, 0x83, 0x22, 0x6d,
	0x8e, 0x59, 0xcf, 0xba, 0xbc, 0xb0, 0x48, 0xdf, 0x73, 0x74, 0x24, 0xfd, 0x07, 0x43, 0xd5, 0xb6,
	0x99, 0xe3, 0x3b, 0xc1, 0x38, 0xa6, 0x61, 0x17, 0x6b, 0x67, 0xe4, 0x5b, 0xc4, 0x7b, 0x22, 0x30,
	0x7e, 0x71, 0x0b, 0x3d, 0x82, 0xfe, 0x6d, 0x5e, 0xa0, 0x66, 0xc4, 0x7a, 0xff, 0x7c, 0x1c, 0x33,
	0x3c, 0x6f, 0xd8, 0x33, 0x61, 0x54, 0xcd, 0x5b, 0x1f, 0xfd, 0x0d, 0x9f, 0x51, 0x6c, 0x72, 0x25,
	0xc5, 0x1a, 0x85, 0xb9, 0xe2, 0x97, 0x36, 0xfa, 0x88, 0xef, 0x9d, 0xd2, 0x6f, 0xd0, 0x37, 0x2a,
	0xc9, 0x90, 0x39, 0x3e, 0x09, 0x26, 0xbc, 0x15, 0x94, 0xc1, 0xd0, 0x16, 0x17, 0xa7, 0xcc, 0xf5,
	0x49, 0xe0, 0xf2, 0xad, 0xa4, 0x14, 0x5c, 0x5d, 0x8b, 0x8c, 0xf5, 0x7d, 0x12, 0x7c, 0xe2, 0xb6,
	0xf6, 0x66, 0x00, 0xbb, 0x00, 0xf4, 0x0b, 0x38, 0x2b, 0xac, 0xed, 0x7e, 0x47, 0xbc, 0x29, 0x9b,
	0x19, 0x9b, 0xa4, 0xa8, 0xb0, 0x8b, 0xd0, 0x8a, 0xc3, 0xde, 0x8c, 0xc4, 0xc7, 0x30, 0x59, 0xd8,
	0xa5, 0x70, 0xfb, 0x41, 0xe9, 0x14, 0x1c, 0x5e, 0x09, 0x4a, 0xdf, 0xbe, 0xae, 0xf7, 0xf5, 0xd5,
	0xfa, 0x74, 0x29, 0x85, 0xc6, 0x29, 0x39, 0xf9, 0x7f, 0xfd, 0x77, 0x99, 0x9b, 0xbb, 0x2a, 0x0d,
	0x33, 0xb9, 0x8e, 0x16, 0xb5, 0xc8, 0x12, 0x21, 0xa3, 0x4c, 0xde, 0x60, 0x2a, 0x1f, 0xa2, 0xfd,
	0x7f, 0x2b, 0x1d, 0xd8, 0xc7, 0xc1, 0x73, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0x57, 0x89, 0x16,
	0x76, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScriptRunnerClient is the client API for ScriptRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScriptRunnerClient interface {
	// Run runs script in secure environment.
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (ScriptRunner_RunClient, error)
}

type scriptRunnerClient struct {
	cc *grpc.ClientConn
}

func NewScriptRunnerClient(cc *grpc.ClientConn) ScriptRunnerClient {
	return &scriptRunnerClient{cc}
}

func (c *scriptRunnerClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (ScriptRunner_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ScriptRunner_serviceDesc.Streams[0], "/broker.ScriptRunner/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &scriptRunnerRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScriptRunner_RunClient interface {
	Recv() (*proto2.RunResponse, error)
	grpc.ClientStream
}

type scriptRunnerRunClient struct {
	grpc.ClientStream
}

func (x *scriptRunnerRunClient) Recv() (*proto2.RunResponse, error) {
	m := new(proto2.RunResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScriptRunnerServer is the server API for ScriptRunner service.
type ScriptRunnerServer interface {
	// Run runs script in secure environment.
	Run(*RunRequest, ScriptRunner_RunServer) error
}

func RegisterScriptRunnerServer(s *grpc.Server, srv ScriptRunnerServer) {
	s.RegisterService(&_ScriptRunner_serviceDesc, srv)
}

func _ScriptRunner_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScriptRunnerServer).Run(m, &scriptRunnerRunServer{stream})
}

type ScriptRunner_RunServer interface {
	Send(*proto2.RunResponse) error
	grpc.ServerStream
}

type scriptRunnerRunServer struct {
	grpc.ServerStream
}

func (x *scriptRunnerRunServer) Send(m *proto2.RunResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ScriptRunner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "broker.ScriptRunner",
	HandlerType: (*ScriptRunnerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _ScriptRunner_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/broker/proto/broker.proto",
}
