// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import afero "github.com/spf13/afero"
import filerepo "github.com/Syncano/codebox/pkg/filerepo"
import io "io"
import mock "github.com/stretchr/testify/mock"

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// CleanupUnused provides a mock function with given fields:
func (_m *Repo) CleanupUnused() {
	_m.Called()
}

// CleanupVolume provides a mock function with given fields: volKey
func (_m *Repo) CleanupVolume(volKey string) error {
	ret := _m.Called(volKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(volKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVolume provides a mock function with given fields:
func (_m *Repo) CreateVolume() (string, string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Delete provides a mock function with given fields: key
func (_m *Repo) Delete(key string) {
	_m.Called(key)
}

// DeleteVolume provides a mock function with given fields: volKey
func (_m *Repo) DeleteVolume(volKey string) error {
	ret := _m.Called(volKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(volKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *Repo) Flush() {
	_m.Called()
}

// Get provides a mock function with given fields: key
func (_m *Repo) Get(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetFS provides a mock function with given fields:
func (_m *Repo) GetFS() afero.Fs {
	ret := _m.Called()

	var r0 afero.Fs
	if rf, ok := ret.Get(0).(func() afero.Fs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(afero.Fs)
		}
	}

	return r0
}

// Link provides a mock function with given fields: volKey, resKey, destName
func (_m *Repo) Link(volKey string, resKey string, destName string) error {
	ret := _m.Called(volKey, resKey, destName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(volKey, resKey, destName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Options provides a mock function with given fields:
func (_m *Repo) Options() filerepo.Options {
	ret := _m.Called()

	var r0 filerepo.Options
	if rf, ok := ret.Get(0).(func() filerepo.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(filerepo.Options)
	}

	return r0
}

// PermStore provides a mock function with given fields: key, src, filename
func (_m *Repo) PermStore(key string, src io.Reader, filename string) (string, error) {
	ret := _m.Called(key, src, filename)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, io.Reader, string) string); ok {
		r0 = rf(key, src, filename)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, io.Reader, string) error); ok {
		r1 = rf(key, src, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelativePath provides a mock function with given fields: path
func (_m *Repo) RelativePath(path string) (string, error) {
	ret := _m.Called(path)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Shutdown provides a mock function with given fields:
func (_m *Repo) Shutdown() {
	_m.Called()
}

// StoragePath provides a mock function with given fields:
func (_m *Repo) StoragePath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Store provides a mock function with given fields: key, storeKey, src, filename
func (_m *Repo) Store(key string, storeKey string, src io.Reader, filename string) (string, error) {
	ret := _m.Called(key, storeKey, src, filename)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, io.Reader, string) string); ok {
		r0 = rf(key, storeKey, src, filename)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, io.Reader, string) error); ok {
		r1 = rf(key, storeKey, src, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreLock provides a mock function with given fields: key
func (_m *Repo) StoreLock(key string) (chan struct{}, string) {
	ret := _m.Called(key)

	var r0 chan struct{}
	if rf, ok := ret.Get(0).(func(string) chan struct{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan struct{})
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// StoreUnlock provides a mock function with given fields: key, storeKey, ch, save
func (_m *Repo) StoreUnlock(key string, storeKey string, ch chan struct{}, save bool) {
	_m.Called(key, storeKey, ch, save)
}
