// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import docker "github.com/Syncano/codebox/pkg/docker"
import io "io"
import mock "github.com/stretchr/testify/mock"
import types "github.com/docker/docker/api/types"

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// AttachContainer provides a mock function with given fields: ctx, containerID
func (_m *Manager) AttachContainer(ctx context.Context, containerID string) (types.HijackedResponse, error) {
	ret := _m.Called(ctx, containerID)

	var r0 types.HijackedResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) types.HijackedResponse); ok {
		r0 = rf(ctx, containerID)
	} else {
		r0 = ret.Get(0).(types.HijackedResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, containerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerErrorLog provides a mock function with given fields: ctx, containerID
func (_m *Manager) ContainerErrorLog(ctx context.Context, containerID string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, containerID)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, containerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, containerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainer provides a mock function with given fields: ctx, image, user, cmd, env, labels, constraints, binds
func (_m *Manager) CreateContainer(ctx context.Context, image string, user string, cmd []string, env []string, labels map[string]string, constraints docker.Constraints, binds []string) (string, error) {
	ret := _m.Called(ctx, image, user, cmd, env, labels, constraints, binds)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, []string, map[string]string, docker.Constraints, []string) string); ok {
		r0 = rf(ctx, image, user, cmd, env, labels, constraints, binds)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string, []string, map[string]string, docker.Constraints, []string) error); ok {
		r1 = rf(ctx, image, user, cmd, env, labels, constraints, binds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadImage provides a mock function with given fields: ctx, image, check
func (_m *Manager) DownloadImage(ctx context.Context, image string, check bool) error {
	ret := _m.Called(ctx, image, check)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, image, check)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListContainersByLabel provides a mock function with given fields: ctx, label
func (_m *Manager) ListContainersByLabel(ctx context.Context, label string) ([]types.Container, error) {
	ret := _m.Called(ctx, label)

	var r0 []types.Container
	if rf, ok := ret.Get(0).(func(context.Context, string) []types.Container); ok {
		r0 = rf(ctx, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *Manager) Options() docker.Options {
	ret := _m.Called()

	var r0 docker.Options
	if rf, ok := ret.Get(0).(func() docker.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(docker.Options)
	}

	return r0
}

// PruneImages provides a mock function with given fields: ctx
func (_m *Manager) PruneImages(ctx context.Context) (types.ImagesPruneReport, error) {
	ret := _m.Called(ctx)

	var r0 types.ImagesPruneReport
	if rf, ok := ret.Get(0).(func(context.Context) types.ImagesPruneReport); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.ImagesPruneReport)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLimits provides a mock function with given fields: concurrency, nodeIOPS
func (_m *Manager) SetLimits(concurrency uint, nodeIOPS uint64) {
	_m.Called(concurrency, nodeIOPS)
}

// StartContainer provides a mock function with given fields: ctx, containerID
func (_m *Manager) StartContainer(ctx context.Context, containerID string) error {
	ret := _m.Called(ctx, containerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopContainer provides a mock function with given fields: ctx, containerID
func (_m *Manager) StopContainer(ctx context.Context, containerID string) error {
	ret := _m.Called(ctx, containerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
