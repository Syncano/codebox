// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import proto "github.com/Syncano/codebox/pkg/lb/proto"

// WorkerPlugServer is an autogenerated mock type for the WorkerPlugServer type
type WorkerPlugServer struct {
	mock.Mock
}

// ContainerRemoved provides a mock function with given fields: _a0, _a1
func (_m *WorkerPlugServer) ContainerRemoved(_a0 context.Context, _a1 *proto.ContainerRemovedRequest) (*proto.ContainerRemovedResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.ContainerRemovedResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ContainerRemovedRequest) *proto.ContainerRemovedResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ContainerRemovedResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.ContainerRemovedRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields: _a0, _a1
func (_m *WorkerPlugServer) Disconnect(_a0 context.Context, _a1 *proto.DisconnectRequest) (*proto.DisconnectResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.DisconnectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DisconnectRequest) *proto.DisconnectResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DisconnectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.DisconnectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Heartbeat provides a mock function with given fields: _a0, _a1
func (_m *WorkerPlugServer) Heartbeat(_a0 context.Context, _a1 *proto.HeartbeatRequest) (*proto.HeartbeatResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.HeartbeatResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.HeartbeatRequest) *proto.HeartbeatResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HeartbeatResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.HeartbeatRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *WorkerPlugServer) Register(_a0 context.Context, _a1 *proto.RegisterRequest) (*proto.RegisterResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.RegisterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterRequest) *proto.RegisterResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RegisterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.RegisterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlotReady provides a mock function with given fields: _a0, _a1
func (_m *WorkerPlugServer) SlotReady(_a0 context.Context, _a1 *proto.SlotReadyRequest) (*proto.SlotReadyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.SlotReadyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SlotReadyRequest) *proto.SlotReadyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SlotReadyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SlotReadyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
