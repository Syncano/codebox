// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/lb/proto/workerplug.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ResourceReleaseRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MCPU   uint32 `protobuf:"varint,2,opt,name=mCPU,proto3" json:"mCPU,omitempty"`
	Memory uint64 `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (m *ResourceReleaseRequest) Reset()                    { *m = ResourceReleaseRequest{} }
func (m *ResourceReleaseRequest) String() string            { return proto1.CompactTextString(m) }
func (*ResourceReleaseRequest) ProtoMessage()               {}
func (*ResourceReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptorWorkerplug, []int{0} }

func (m *ResourceReleaseRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ResourceReleaseRequest) GetMCPU() uint32 {
	if m != nil {
		return m.MCPU
	}
	return 0
}

func (m *ResourceReleaseRequest) GetMemory() uint64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

type ResourceReleaseResponse struct {
}

func (m *ResourceReleaseResponse) Reset()         { *m = ResourceReleaseResponse{} }
func (m *ResourceReleaseResponse) String() string { return proto1.CompactTextString(m) }
func (*ResourceReleaseResponse) ProtoMessage()    {}
func (*ResourceReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorWorkerplug, []int{1}
}

type ContainerRemovedRequest struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ContainerID string `protobuf:"bytes,5,opt,name=containerID,proto3" json:"containerID,omitempty"`
	SourceHash  string `protobuf:"bytes,2,opt,name=sourceHash,proto3" json:"sourceHash,omitempty"`
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	UserID      string `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (m *ContainerRemovedRequest) Reset()         { *m = ContainerRemovedRequest{} }
func (m *ContainerRemovedRequest) String() string { return proto1.CompactTextString(m) }
func (*ContainerRemovedRequest) ProtoMessage()    {}
func (*ContainerRemovedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorWorkerplug, []int{2}
}

func (m *ContainerRemovedRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContainerRemovedRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *ContainerRemovedRequest) GetSourceHash() string {
	if m != nil {
		return m.SourceHash
	}
	return ""
}

func (m *ContainerRemovedRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ContainerRemovedRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type ContainerRemovedResponse struct {
}

func (m *ContainerRemovedResponse) Reset()         { *m = ContainerRemovedResponse{} }
func (m *ContainerRemovedResponse) String() string { return proto1.CompactTextString(m) }
func (*ContainerRemovedResponse) ProtoMessage()    {}
func (*ContainerRemovedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorWorkerplug, []int{3}
}

type RegisterRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Port   uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	MCPU   uint32 `protobuf:"varint,3,opt,name=mCPU,proto3" json:"mCPU,omitempty"`
	Memory uint64 `protobuf:"varint,4,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto1.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptorWorkerplug, []int{4} }

func (m *RegisterRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RegisterRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *RegisterRequest) GetMCPU() uint32 {
	if m != nil {
		return m.MCPU
	}
	return 0
}

func (m *RegisterRequest) GetMemory() uint64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

type RegisterResponse struct {
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto1.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptorWorkerplug, []int{5} }

type HeartbeatRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Memory uint64 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (m *HeartbeatRequest) Reset()                    { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string            { return proto1.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()               {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptorWorkerplug, []int{6} }

func (m *HeartbeatRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HeartbeatRequest) GetMemory() uint64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

type HeartbeatResponse struct {
}

func (m *HeartbeatResponse) Reset()                    { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string            { return proto1.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()               {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptorWorkerplug, []int{7} }

type DisconnectRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DisconnectRequest) Reset()                    { *m = DisconnectRequest{} }
func (m *DisconnectRequest) String() string            { return proto1.CompactTextString(m) }
func (*DisconnectRequest) ProtoMessage()               {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) { return fileDescriptorWorkerplug, []int{8} }

func (m *DisconnectRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DisconnectResponse struct {
}

func (m *DisconnectResponse) Reset()                    { *m = DisconnectResponse{} }
func (m *DisconnectResponse) String() string            { return proto1.CompactTextString(m) }
func (*DisconnectResponse) ProtoMessage()               {}
func (*DisconnectResponse) Descriptor() ([]byte, []int) { return fileDescriptorWorkerplug, []int{9} }

func init() {
	proto1.RegisterType((*ResourceReleaseRequest)(nil), "lb.ResourceReleaseRequest")
	proto1.RegisterType((*ResourceReleaseResponse)(nil), "lb.ResourceReleaseResponse")
	proto1.RegisterType((*ContainerRemovedRequest)(nil), "lb.ContainerRemovedRequest")
	proto1.RegisterType((*ContainerRemovedResponse)(nil), "lb.ContainerRemovedResponse")
	proto1.RegisterType((*RegisterRequest)(nil), "lb.RegisterRequest")
	proto1.RegisterType((*RegisterResponse)(nil), "lb.RegisterResponse")
	proto1.RegisterType((*HeartbeatRequest)(nil), "lb.HeartbeatRequest")
	proto1.RegisterType((*HeartbeatResponse)(nil), "lb.HeartbeatResponse")
	proto1.RegisterType((*DisconnectRequest)(nil), "lb.DisconnectRequest")
	proto1.RegisterType((*DisconnectResponse)(nil), "lb.DisconnectResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WorkerPlug service

type WorkerPlugClient interface {
	// ResourceRelease handles notifications sent by client whenever a run has finished.
	ResourceRelease(ctx context.Context, in *ResourceReleaseRequest, opts ...grpc.CallOption) (*ResourceReleaseResponse, error)
	// ContainerRemoved handles notifications sent by client whenever a container gets removed from cache.
	ContainerRemoved(ctx context.Context, in *ContainerRemovedRequest, opts ...grpc.CallOption) (*ContainerRemovedResponse, error)
	// Register is sent at the beginning by the worker.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Heartbeat is meant to be called periodically by worker. If it's not sent for some time, worker will be removed.
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// Disconnect gracefully removes worker.
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
}

type workerPlugClient struct {
	cc *grpc.ClientConn
}

func NewWorkerPlugClient(cc *grpc.ClientConn) WorkerPlugClient {
	return &workerPlugClient{cc}
}

func (c *workerPlugClient) ResourceRelease(ctx context.Context, in *ResourceReleaseRequest, opts ...grpc.CallOption) (*ResourceReleaseResponse, error) {
	out := new(ResourceReleaseResponse)
	err := grpc.Invoke(ctx, "/lb.WorkerPlug/ResourceRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerPlugClient) ContainerRemoved(ctx context.Context, in *ContainerRemovedRequest, opts ...grpc.CallOption) (*ContainerRemovedResponse, error) {
	out := new(ContainerRemovedResponse)
	err := grpc.Invoke(ctx, "/lb.WorkerPlug/ContainerRemoved", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerPlugClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/lb.WorkerPlug/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerPlugClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := grpc.Invoke(ctx, "/lb.WorkerPlug/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerPlugClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	out := new(DisconnectResponse)
	err := grpc.Invoke(ctx, "/lb.WorkerPlug/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WorkerPlug service

type WorkerPlugServer interface {
	// ResourceRelease handles notifications sent by client whenever a run has finished.
	ResourceRelease(context.Context, *ResourceReleaseRequest) (*ResourceReleaseResponse, error)
	// ContainerRemoved handles notifications sent by client whenever a container gets removed from cache.
	ContainerRemoved(context.Context, *ContainerRemovedRequest) (*ContainerRemovedResponse, error)
	// Register is sent at the beginning by the worker.
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Heartbeat is meant to be called periodically by worker. If it's not sent for some time, worker will be removed.
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// Disconnect gracefully removes worker.
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error)
}

func RegisterWorkerPlugServer(s *grpc.Server, srv WorkerPlugServer) {
	s.RegisterService(&_WorkerPlug_serviceDesc, srv)
}

func _WorkerPlug_ResourceRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerPlugServer).ResourceRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.WorkerPlug/ResourceRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerPlugServer).ResourceRelease(ctx, req.(*ResourceReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerPlug_ContainerRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRemovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerPlugServer).ContainerRemoved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.WorkerPlug/ContainerRemoved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerPlugServer).ContainerRemoved(ctx, req.(*ContainerRemovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerPlug_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerPlugServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.WorkerPlug/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerPlugServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerPlug_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerPlugServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.WorkerPlug/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerPlugServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerPlug_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerPlugServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.WorkerPlug/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerPlugServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkerPlug_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lb.WorkerPlug",
	HandlerType: (*WorkerPlugServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResourceRelease",
			Handler:    _WorkerPlug_ResourceRelease_Handler,
		},
		{
			MethodName: "ContainerRemoved",
			Handler:    _WorkerPlug_ContainerRemoved_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _WorkerPlug_Register_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _WorkerPlug_Heartbeat_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _WorkerPlug_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/lb/proto/workerplug.proto",
}

func (m *ResourceReleaseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceReleaseRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.MCPU != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(m.MCPU))
	}
	if m.Memory != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(m.Memory))
	}
	return i, nil
}

func (m *ResourceReleaseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceReleaseResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ContainerRemovedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRemovedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.SourceHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(len(m.SourceHash)))
		i += copy(dAtA[i:], m.SourceHash)
	}
	if len(m.Environment) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(len(m.Environment)))
		i += copy(dAtA[i:], m.Environment)
	}
	if len(m.UserID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if len(m.ContainerID) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(len(m.ContainerID)))
		i += copy(dAtA[i:], m.ContainerID)
	}
	return i, nil
}

func (m *ContainerRemovedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRemovedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(m.Port))
	}
	if m.MCPU != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(m.MCPU))
	}
	if m.Memory != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(m.Memory))
	}
	return i, nil
}

func (m *RegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Memory != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(m.Memory))
	}
	return i, nil
}

func (m *HeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DisconnectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisconnectRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWorkerplug(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *DisconnectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisconnectResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintWorkerplug(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ResourceReleaseRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWorkerplug(uint64(l))
	}
	if m.MCPU != 0 {
		n += 1 + sovWorkerplug(uint64(m.MCPU))
	}
	if m.Memory != 0 {
		n += 1 + sovWorkerplug(uint64(m.Memory))
	}
	return n
}

func (m *ResourceReleaseResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ContainerRemovedRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWorkerplug(uint64(l))
	}
	l = len(m.SourceHash)
	if l > 0 {
		n += 1 + l + sovWorkerplug(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovWorkerplug(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovWorkerplug(uint64(l))
	}
	l = len(m.ContainerID)
	if l > 0 {
		n += 1 + l + sovWorkerplug(uint64(l))
	}
	return n
}

func (m *ContainerRemovedResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RegisterRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWorkerplug(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovWorkerplug(uint64(m.Port))
	}
	if m.MCPU != 0 {
		n += 1 + sovWorkerplug(uint64(m.MCPU))
	}
	if m.Memory != 0 {
		n += 1 + sovWorkerplug(uint64(m.Memory))
	}
	return n
}

func (m *RegisterResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *HeartbeatRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWorkerplug(uint64(l))
	}
	if m.Memory != 0 {
		n += 1 + sovWorkerplug(uint64(m.Memory))
	}
	return n
}

func (m *HeartbeatResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DisconnectRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWorkerplug(uint64(l))
	}
	return n
}

func (m *DisconnectResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovWorkerplug(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWorkerplug(x uint64) (n int) {
	return sovWorkerplug(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourceReleaseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerplug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceReleaseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceReleaseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkerplug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MCPU", wireType)
			}
			m.MCPU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MCPU |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerplug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerplug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceReleaseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerplug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceReleaseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceReleaseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerplug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerplug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerRemovedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerplug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRemovedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRemovedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkerplug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkerplug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkerplug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkerplug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkerplug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerplug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerplug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerRemovedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerplug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRemovedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRemovedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerplug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerplug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerplug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkerplug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MCPU", wireType)
			}
			m.MCPU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MCPU |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerplug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerplug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerplug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerplug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerplug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerplug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkerplug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerplug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerplug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerplug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerplug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerplug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisconnectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerplug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisconnectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisconnectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkerplug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerplug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerplug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisconnectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerplug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisconnectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisconnectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerplug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerplug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkerplug(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkerplug
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkerplug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWorkerplug
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWorkerplug
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWorkerplug(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWorkerplug = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkerplug   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("pkg/lb/proto/workerplug.proto", fileDescriptorWorkerplug) }

var fileDescriptorWorkerplug = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x49, 0x56, 0x26, 0xfa, 0x22, 0xa0, 0xf3, 0x46, 0x17, 0x02, 0x44, 0x55, 0x38, 0xd0,
	0x53, 0x23, 0x81, 0x90, 0xf8, 0x73, 0x63, 0x3d, 0x6c, 0x48, 0x48, 0x93, 0x01, 0x21, 0x71, 0x4b,
	0xd2, 0x57, 0x59, 0xb4, 0xc4, 0x0e, 0xb6, 0x33, 0xd8, 0x37, 0xe1, 0x0b, 0xf0, 0x5d, 0x38, 0x72,
	0xe1, 0x8e, 0xca, 0x17, 0x41, 0x71, 0xdc, 0x36, 0x69, 0x93, 0x53, 0xed, 0xe7, 0xf5, 0xf3, 0xbc,
	0x6f, 0x7f, 0x76, 0xe0, 0x71, 0x71, 0x99, 0x04, 0x59, 0x14, 0x14, 0x82, 0x2b, 0x1e, 0x7c, 0xe3,
	0xe2, 0x12, 0x45, 0x91, 0x95, 0xc9, 0x4c, 0x0b, 0xc4, 0xce, 0x22, 0xff, 0x23, 0x8c, 0x29, 0x4a,
	0x5e, 0x8a, 0x18, 0x29, 0x66, 0x18, 0x4a, 0xa4, 0xf8, 0xb5, 0x44, 0xa9, 0xc8, 0x5d, 0xb0, 0xd3,
	0x85, 0x63, 0x4d, 0xac, 0xe9, 0x90, 0xda, 0xe9, 0x82, 0x10, 0x18, 0xe4, 0x27, 0xe7, 0x9f, 0x1c,
	0x7b, 0x62, 0x4d, 0xef, 0x50, 0xbd, 0x26, 0x63, 0xd8, 0xcf, 0x31, 0xe7, 0xe2, 0xda, 0xd9, 0x9b,
	0x58, 0xd3, 0x01, 0x35, 0x3b, 0xff, 0x01, 0x1c, 0xef, 0xa4, 0xca, 0x82, 0x33, 0x89, 0xfe, 0x4f,
	0x0b, 0x8e, 0x4f, 0x38, 0x53, 0x61, 0xca, 0x50, 0x50, 0xcc, 0xf9, 0x15, 0x2e, 0xfa, 0x5a, 0x7a,
	0x00, 0x75, 0xc8, 0x69, 0x28, 0x2f, 0x74, 0xe3, 0x21, 0x6d, 0x28, 0x64, 0x02, 0xb7, 0x91, 0x5d,
	0xa5, 0x82, 0xb3, 0x1c, 0x99, 0xd2, 0x33, 0x0c, 0x69, 0x53, 0xaa, 0x06, 0x2c, 0x25, 0x8a, 0xb3,
	0xb9, 0x33, 0xd0, 0x45, 0xb3, 0xab, 0x9c, 0xf1, 0x6a, 0x88, 0xb3, 0xb9, 0x73, 0xb3, 0x76, 0x36,
	0x24, 0xdf, 0x05, 0x67, 0x77, 0x4c, 0xf3, 0x1f, 0x42, 0xb8, 0x47, 0x31, 0x49, 0xa5, 0xaa, 0x4a,
	0xbd, 0xb4, 0x0a, 0x2e, 0xd4, 0x8a, 0x56, 0xb5, 0x5e, 0x13, 0xdc, 0xeb, 0x24, 0x38, 0x68, 0x11,
	0x24, 0x30, 0xda, 0xb4, 0x30, 0x6d, 0x5f, 0xc3, 0xe8, 0x14, 0x43, 0xa1, 0x22, 0x0c, 0x55, 0x5f,
	0xdf, 0x4d, 0x9e, 0xdd, 0xca, 0x3b, 0x84, 0x83, 0x86, 0xd7, 0x04, 0x3e, 0x81, 0x83, 0x79, 0x2a,
	0x63, 0xce, 0x18, 0xc6, 0x7d, 0x89, 0xfe, 0x11, 0x90, 0xe6, 0xa1, 0xda, 0xfa, 0xec, 0x8f, 0x0d,
	0xf0, 0x59, 0x3f, 0xa8, 0xf3, 0xac, 0x4c, 0xc8, 0xbb, 0x8a, 0x48, 0xeb, 0xc2, 0x89, 0x3b, 0xcb,
	0xa2, 0x59, 0xf7, 0xdb, 0x72, 0x1f, 0x76, 0xd6, 0xea, 0x68, 0xf2, 0x1e, 0x46, 0xdb, 0xe4, 0x89,
	0x36, 0xf4, 0x3c, 0x1b, 0xf7, 0x51, 0x77, 0xd1, 0xc4, 0xbd, 0x80, 0x5b, 0x2b, 0x92, 0xe4, 0xb0,
	0xee, 0xdb, 0xba, 0x3a, 0xf7, 0xa8, 0x2d, 0x1a, 0xdb, 0x4b, 0x18, 0xae, 0x81, 0x11, 0x7d, 0x64,
	0x9b, 0xbd, 0x7b, 0x7f, 0x4b, 0x35, 0xce, 0x37, 0x00, 0x1b, 0x60, 0x44, 0x1f, 0xda, 0xa1, 0xec,
	0x8e, 0xb7, 0xe5, 0xda, 0xfc, 0xf6, 0xd5, 0xaf, 0xa5, 0x67, 0xfd, 0x5e, 0x7a, 0xd6, 0xdf, 0xa5,
	0x67, 0xfd, 0xf8, 0xe7, 0xdd, 0xf8, 0xf2, 0x34, 0x49, 0xd5, 0x45, 0x19, 0xcd, 0x62, 0x9e, 0x07,
	0x1f, 0xae, 0x59, 0x1c, 0x32, 0x1e, 0xc4, 0x7c, 0x81, 0x11, 0xff, 0x1e, 0x34, 0xbf, 0xef, 0x68,
	0x5f, 0xff, 0x3c, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x51, 0xbb, 0x09, 0x5b, 0xf6, 0x03, 0x00,
	0x00,
}
