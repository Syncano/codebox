// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import logrus "github.com/sirupsen/logrus"
import mock "github.com/stretchr/testify/mock"
import script "github.com/Syncano/codebox/pkg/script"

// Runner is an autogenerated mock type for the Runner type
type Runner struct {
	mock.Mock
}

// CleanupUnused provides a mock function with given fields:
func (_m *Runner) CleanupUnused() {
	_m.Called()
}

// CreatePool provides a mock function with given fields:
func (_m *Runner) CreatePool() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadAllImages provides a mock function with given fields:
func (_m *Runner) DownloadAllImages() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsRunning provides a mock function with given fields:
func (_m *Runner) IsRunning() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OnContainerRemoved provides a mock function with given fields: f
func (_m *Runner) OnContainerRemoved(f script.ContainerRemovedHandler) {
	_m.Called(f)
}

// OnRunDone provides a mock function with given fields: f
func (_m *Runner) OnRunDone(f script.RunDoneHandler) {
	_m.Called(f)
}

// Options provides a mock function with given fields:
func (_m *Runner) Options() script.Options {
	ret := _m.Called()

	var r0 script.Options
	if rf, ok := ret.Get(0).(func() script.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(script.Options)
	}

	return r0
}

// Run provides a mock function with given fields: ctx, logger, runtime, sourceHash, environment, userID, options
func (_m *Runner) Run(ctx context.Context, logger logrus.FieldLogger, runtime string, sourceHash string, environment string, userID string, options *script.RunOptions) (*script.Result, error) {
	ret := _m.Called(ctx, logger, runtime, sourceHash, environment, userID, options)

	var r0 *script.Result
	if rf, ok := ret.Get(0).(func(context.Context, logrus.FieldLogger, string, string, string, string, *script.RunOptions) *script.Result); ok {
		r0 = rf(ctx, logger, runtime, sourceHash, environment, userID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*script.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, logrus.FieldLogger, string, string, string, string, *script.RunOptions) error); ok {
		r1 = rf(ctx, logger, runtime, sourceHash, environment, userID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Shutdown provides a mock function with given fields:
func (_m *Runner) Shutdown() {
	_m.Called()
}

// StopPool provides a mock function with given fields:
func (_m *Runner) StopPool() {
	_m.Called()
}
